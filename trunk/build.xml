<?xml version="1.0"?>
<project name="obi" default="all" basedir=".">
    <import file="build-setup.xml"/>

    <target name="all" depends="clean,release"/>
    <target name="compile" depends="clean,-compile"/>
    <target name="spec" depends="clean,-spec"/>
    <target name="scaladoc" depends="clean,-scaladoc"/>
    <target name="jar" depends="clean,-jar-classes"/>
    <target name="release" depends="clean,-release"/>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="-compile">
    </target>

    <target name="-spec"/>

    <target name="-jar-classes" depends="-compile">
        <!--
        Add the following, see: http://java.sun.com/j2se/1.3/docs/guide/versioning/spec/VersioningSpecification.html#PackageVersionSpecification
            Implementation-Title: java.util
            Implementation-Version: build57
            Implementation-Vendor: SunMicrosystems. Inc.
        -->
        <jar destfile="${build.dir}/${project.jar}">
            <fileset dir="${main.classes.dir}"/>
        </jar>
    </target>

    <target name="-zip-src" depends="-compile">
        <jar destfile="${build.dir}/${src.zip}">
            <fileset dir="${main.src.dir}"/>
        </jar>
    </target>

    <macrodef name="compile">
        <attribute name="src"/>
        <attribute name="classes"/>
        <attribute name="classpath"/>
        <sequential>
            <taskdef resource="${scala.antlib}" classpathref="libs.path"/>
            <mkdir dir="@{classes}"/>
            <scalac srcdir="@{src}" destdir="@{classes}" force="always" deprecation="on" unchecked="on"
                    classpathref="@{classpath}">
                <include name="**/**.scala"/>
            </scalac>
        </sequential>
    </macrodef>

    <target name="scalac" depends="init, copy-src" description="compile the Scala source">
        <compile src="${build.dir}/src" classes="${build.dir}/classes/src" classpath="libs.path"/>
    </target>

    <target name="scalac-test" depends="scalac, copy-test-src" description="compile the Scala test source">
        <compile src="${build.dir}/test-src" classes="${build.dir}/classes/test-src" classpath="project.path"/>
    </target>

    <target name="-scaladoc">
        <taskdef resource="scala/tools/ant/antlib.xml" classpathref="main.class.path"/>
        <mkdir dir="${scaladoc.dir}"/>
        <scaladoc srcdir="${main.src.dir}" destdir="${scaladoc.dir}" classpathref="main.class.path"
                windowtitle="${project.longname} ${project.version.full}" doctitle="${project.longname} ${project.version.full}">
            <patternset refid="all.code.pattern"/>
        </scaladoc>
        <zip destfile="${build.dir}/${scaladoc.zip}">
            <fileset dir="${scaladoc.dir}"/>
        </zip>
    </target>

    <target name="-release" depends="-jar-classes,-zip-src,-scaladoc">
        <mkdir dir="${release.dir}"/>
        <zip destfile="${release.dir}/${project.zip}">
            <fileset dir="${basedir}">
                <include name="LICENCE"/>
                <include name="NOTICE"/>
                <include name="README"/>
                <include name="RELEASE-NOTES"/>
            </fileset>
            <fileset dir="${build.dir}" includes="${project.jar}"/>
            <fileset dir="${build.dir}" includes="${javadoc.zip}"/>
            <zipfileset dir="${lib.dir}/ant" prefix="lib" includes="ant-1.*.jar,ant-license.txt"/>
            <zipfileset dir="${lib.dir}/cglib" prefix="lib"/>
            <zipfileset dir="${lib.dir}/hamcrest" prefix="lib"/>
            <zipfileset dir="${lib.dir}/jmock" prefix="lib"/>
            <zipfileset dir="${lib.dir}/junit" prefix="lib"/>
            <zipfileset dir="${lib.dir}/objenesis" prefix="lib"/>
        </zip>



        <mkdir dir="${release.dir}"/>
        <zip destfile="${build.dir}/release/${release.file.prefix}.zip">
            <zipfileset dir="${dest}"/>
        </zip>
        <tar destfile="${build.dir}/release/${release.file.prefix}.tar.gz" compression="gzip">
            <tarfileset dir="${dest}"/>
        </tar>
        <checksum file="${build.dir}/release/${release.file.prefix}.zip" algorithm="MD5"/>
        <checksum file="${build.dir}/release/${release.file.prefix}.zip" algorithm="SHA"/>
        <checksum file="${build.dir}/release/${release.file.prefix}.tar.gz" algorithm="MD5"/>
        <checksum file="${build.dir}/release/${release.file.prefix}.tar.gz" algorithm="SHA"/>
    </target>

    <target name="dist-release" depends="release" description="copy release files">
        <fail unless="dest" message="Set the dest property"/>
        <mkdir dir="${dest}/release"/>
        <copy todir="${dest}/release">
            <fileset dir="${build.dir}/release" includes="**/**"/>
        </copy>
    </target>


</project>

